package sept;

import java.io.*;
import java.util.*;

public class TimePass {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean codechef=true;
    boolean codechef=true;
    
	void solve()
	{
		int n=ni(),x=ni()-1,y=ni()-1;
		int[] from=new int[2*(n-1)];
		int[] to=new int[2*(n-1)];
		int ind=0;
		for(int i=0;i<n-1;i++)
		{
			int u=ni()-1,v=ni()-1;
			from[ind++]=u;
			to[ind-1]=v;
			from[ind++]=v;
			to[ind-1]=u;
		}
		int[][] g=packD(n,from,to);
		
		dist=new int[n][n];
		for(int i=0;i<n;i++)
		{
			Arrays.fill(dist[i],Integer.MAX_VALUE);
			int[] vis=new int[n];
			curr=i;
			dfs(i,g,vis,0);
			//out.println(Arrays.toString(dist[i]));
		}
		long cnt=0;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(i!=j)
				{
					if(dist[i][j]!=dist[i][x]+dist[x][y]+dist[y][j])cnt++;
				}
			}
		}
		out.println(cnt);
	}
	
	static int[][] dist;
	static int curr;
	static void dfs(int u,int[][] g,int[] vis,int cnt)
	{
		vis[u]=1;
		dist[curr][u]=Math.min(cnt,dist[curr][u]);
		for(int v:g[u])
		{
			if(vis[v]==0)dfs(v,g,vis,cnt+1);
		}
	}
	
	static int[][] packD(int n,int[] from,int[] to)
	{
		int[][] g=new int[n][];
		int[] p=new int[n];
		for(int f:from)
		{
			p[f]++;
		}
		int m=from.length;
		for(int i=0;i<n;i++)
		{
			g[i]=new int[p[i]];
		}
		for(int i=0;i<m;i++)
		{
			g[from[i]][--p[from[i]]]=to[i];
		}
		return g;
	}
    
    public boolean check(int[] cnt,int m)
    {
    	boolean ch=true;
    	for(int i=2;i<=m;i++)
		{
			if(cnt[i]>=cnt[1])
			{
				ch=false;break;
			}
		}
		return ch;
    }
    
    static long[] dp;
    
    public long comp(Pair[] arr,int st,int end,int [] cnt,int m)
    {
    	boolean ch=check(cnt,m);
    	//System.out.println("st:"+st);
    	//System.out.println(Arrays.toString(cnt));
    	if(ch)
    	{
    		//System.out.println(st+" "+Arrays.toString(cnt));
    		return 0;
    	}
    	if(st==end)
    	{
    		cnt[arr[st].a]--;
    		cnt[1]++;
    		ch=check(cnt,m);
    		if(ch)
    		{
    			cnt[arr[st].a]++;
        		cnt[1]--;
    			return arr[st].b;
    		}
    		else
    		{
    			cnt[arr[st].a]++;
        		cnt[1]--;
        		return Long.MAX_VALUE;
    		}
    	}
    	//if(dp[st]!=-1)return dp[st];
    	
    	long min=comp(arr,st+1,end,cnt,m);
    	cnt[arr[st].a]--;
    	cnt[1]++;
    	long val=comp(arr,st+1,end,cnt,m);
    	if(val==Long.MAX_VALUE)val=Long.MAX_VALUE-arr[st].b;
    	min=Math.min(min,arr[st].b+val);
    	cnt[arr[st].a]++;
    	cnt[1]--;
    	dp[st]=min;
    	//System.out.println(min);
    	return min;
    }
    
    static class Temp
    {
    	int diff;
    	int id1;int id2;
    	int a2b;
    	public Temp(int diff,int id1,int id2,int a2b)
    	{
    		this.diff=diff;
    		this.id1=id1;
    		this.id2=id2;
    		this.a2b=a2b;
    	}
    }
	    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static int gcd(int a,int b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    void run() throws Exception
    {
        if(codechef)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new TimePass().run();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}