package binaryTree;

import java.io.*;
import java.util.*;

public class Traversals {
	
	public static void main(String[] args)
	{
		Node rt=new Node(0);
		rt.left=new Node(1);
		rt.right=new Node(2);
		rt.left.left=new Node(3);
		rt.left.right=new Node(4);
		rt.right.left=new Node(5);
		rt.right.right=new Node(6);
		//q1a(rt);
		//System.out.println();
		//q1b(rt);
		//System.out.println();
		//q1c(rt);
		//System.out.println();
		//q2inorderIter(rt);
		//q3(rt);
		//q4(new int[] {3, 1, 4, 0, 5 ,2 ,6},new int[] {0, 1, 3, 4, 2, 5, 6 });
		q6(new int[] {1,2,3,4,5,6,7});
	}
	
	//inorder recursive
	//uses-sorted value for bst
	static void q1a(Node rt)
	{
		if(rt==null)return;
		q1a(rt.left);
		System.out.print(rt.data+" ");
		q1a(rt.right);
	}
	
	//preorder recursive
	//uses-copy of the tree,
	//to get prefix expression of an expression tree
	static void q1b(Node rt)
	{
		if(rt==null)return;
		System.out.print(rt.data+" ");
		q1b(rt.left);
		q1b(rt.right);
	}
	
	//postorder recursive
	//uses-to delete the tree.
	//to get postfix expression of an expression tree
	static void q1c(Node rt)
	{
		if(rt==null)return;
		
		q1c(rt.left);
		q1c(rt.right);
		System.out.print(rt.data+" ");
	}
	//case1-skewed tree->T(n)=n(c+d)
	//case2-equal left & right subtree nodes->T(n)=aT(n/b)+(-)(n)
	
	static void q2inorderIter(Node rt)
	{
		Stack<Node> st=new Stack<>();
		Node curr=rt;
		while(curr!=null || !st.isEmpty())
		{
			while(curr!=null)
			{
				st.push(curr);
				curr=curr.left;
			}
			
			curr=st.pop();
			
			System.out.print(curr.data+" ");
			
			curr=curr.right;
		}
		System.out.println();
	}
	
	//inorder without recursion and without stack
	//morris traversal
	static void q3(Node rt)
	{
		Node curr=rt,pre=null;
		while(curr!=null)
		{
			//no left child
			if(curr.left==null)
			{
				System.out.print(curr.data+" ");
				curr=curr.right;
			}
			else
			{
				//find inorder predecessor
				pre=curr.left;
				while(pre.right!=null && pre.right!=curr)
				{
					pre=pre.right;
				}
				
				//curr as right child of pre
				if(pre.right==null)
				{
					pre.right=curr;
					curr=curr.left;
				}
				else //restore the changes in if part
				{
					pre.right=null;
					System.out.print(curr.data+" ");
					curr=curr.right;
				}
			}
		}
		System.out.println();
	}
	
	//postorder from pre and inorder
	static void q4(int[] in,int[] pre)
	{
		preInd=0;
		HashMap<Integer,Integer> map=new HashMap<>();
		for(int i=0;i<in.length;i++)map.put(in[i],i);
		q4Util(in, pre, 0, in.length-1, map);
		System.out.println();
	}
	
	static int preInd;
	
	static void q4Util(int[] in,int[] pre,int inSt,int inEnd,HashMap<Integer,Integer> map)
	{
		if(inSt>inEnd)return;
		int ind=map.get(pre[preInd++]);
		q4Util(in,pre,inSt,ind-1,map);
		q4Util(in, pre, ind+1, inEnd, map);
		
		System.out.print(in[ind]+" ");
	}
	
	//postorder from preorder of bst
	static void q5(int[] pre)
	{
		q5Util(pre, 0, Integer.MIN_VALUE, Integer.MAX_VALUE);
	}
	
	static void q5Util(int[] pre,int preInd,int minVal,int maxVal)
	{
		if(preInd==pre.length)return;
		
		if(pre[preInd]<minVal || pre[preInd]>maxVal)return;
		
		q5Util(pre,preInd+1,minVal,pre[preInd]);
		q5Util(pre, preInd, pre[preInd], maxVal);
		
		System.out.print(pre[preInd]+" ");
	}
	
	//all possible btrees from inorder
	static void q6(int[] in)
	{
		ArrayList<Node> list=q6Util(in,0,6);
		for(Node rt:list)
		{
			q1a(rt);
			System.out.println();
			q1b(rt);
			System.out.println("//");
		}
	}
	
	static ArrayList<Node> q6Util(int[] in,int st,int end)
	{
		ArrayList<Node> ans=new ArrayList<>();
		
		if(st>end)
		{
			ans.add(null);
			return ans;
		}
		
		for(int i=st;i<=end;i++)
		{
			ArrayList<Node> left=q6Util(in, st, i-1);
			ArrayList<Node> right=q6Util(in, i+1, end);
			for(int j=0;j<left.size();j++)
			{
				for(int k=0;k<right.size();k++)
				{
					Node rt=new Node(in[i]);
					rt.left=left.get(j);
					rt.right=right.get(k);
					ans.add(rt);
				}
			}
		}
		
		return ans;
	}
	//q7-Replace each node in binary tree with the sum of its inorder predecessor and successor
	//store inorder traversal in arr and add 0 at start and at end and do inorder again
	
	
	//q8-populate next inorder successor for each Node
	//REVERSE INORDER traversal and a global next
	
	//q9-Inorder Successor of a node in Binary Tree
	//reverse inorder traversal
	
	//q10-Find n-th node of inorder traversal
	
	//q11-Find n-th node in Postorder traversal of a Binary Tree
	
	//q12-Level Order Tree Traversal
	//
	
}
