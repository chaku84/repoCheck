package sept;

import java.io.*;
import java.util.*;

public class TimePass {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean codechef=true;
    boolean codechef=true;
    
	void solve()
	{
		int t=ni();
		while(t-->0)
		{
			String s=ns();
			int[] cnt=new int[3];
			for(int i=0;i<s.length();i++)
			{
				if(s.charAt(i)>='a' && s.charAt(i)<='z')cnt[0]++;
				if(s.charAt(i)>='A' && s.charAt(i)<='Z')cnt[1]++;
				if(s.charAt(i)>='0' && s.charAt(i)<='9')cnt[2]++;
			}
			if(cnt[0]>0 && cnt[1]>0 && cnt[2]>0)
			{
				out.println(s);
				continue;
			}
			char[] a=s.toCharArray();
			if(cnt[0]==0 && cnt[1]==0)
			{
				a[0]='a';
				a[1]='A';
			}
			else if(cnt[1]==0 && cnt[2]==0)
			{
				a[0]='0';
				a[1]='A';
			}
			else if(cnt[0]==0 && cnt[2]==0)
			{
				a[0]='a';
				a[1]='0';
			}
			else if(cnt[0]==0)
			{
				for(int i=0;i<a.length;i++)
				{
					if(a[i]>='A' && a[i]<='Z' && cnt[1]>=2)
					{
						a[i]='a';break;
					}
					else if(a[i]>='0' && a[i]<='9' && cnt[2]>=2)
					{
						a[i]='a';break;
					}
				}
			}
			else if(cnt[1]==0)
			{
				for(int i=0;i<a.length;i++)
				{
					if(a[i]>='a' && a[i]<='z' && cnt[0]>=2)
					{
						a[i]='A';break;
					}
					else if(a[i]>='0' && a[i]<='9' && cnt[2]>=2)
					{
						a[i]='A';break;
					}
				}
			}
			else
			{
				for(int i=0;i<a.length;i++)
				{
					if(a[i]>='A' && a[i]<='Z' && cnt[1]>=2)
					{
						a[i]='0';break;
					}
					else if(a[i]>='a' && a[i]<='z' && cnt[0]>=2)
					{
						a[i]='0';break;
					}
				}
			}
			out.println(new String(a));
		}
	}
	
	static int[][] packD(int n,int[] from,int[] to)
	{
		int[][] g=new int[n][];
		int[] p=new int[n];
		for(int f:from)
		{
			p[f]++;
		}
		int m=from.length;
		for(int i=0;i<n;i++)
		{
			g[i]=new int[p[i]];
		}
		for(int i=0;i<m;i++)
		{
			g[from[i]][--p[from[i]]]=to[i];
		}
		return g;
	}
	    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static int gcd(int a,int b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    void run() throws Exception
    {
        if(codechef)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new TimePass().run();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}