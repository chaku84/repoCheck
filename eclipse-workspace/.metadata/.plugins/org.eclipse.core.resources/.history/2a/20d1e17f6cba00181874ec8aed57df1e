//package sept;

import java.io.*;
import java.util.*;

public class CodeAgon {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean debug=true;
    boolean debug=false;
    
	void solve()
	{
		int n=ni();
		Pair[] a=new Pair[n];
		int neg=0,pos=0;
		ArrayList<Integer> ind=new ArrayList<>();
		for(int i=0;i<n;i++)
		{
			int curr=ni();
			a[i]=new Pair(curr,i);
			if(a[i].a<0)neg++;
			else if(a[i].a>0)pos++;
			else 
			{
				ind.add(i);
			}
		}
		Arrays.sort(a,new Comparator<Pair>() {
			@Override
			public int compare(Pair p1, Pair p2) {
				// TODO Auto-generated method stub
				if(p1.a-p2.a==0)return p1.b-p2.b;
				return p1.a-p2.a;
			}});
		int cnt=0;
		if(ind.size()==0)
		{
			if(neg%2!=0)
			{
				int cu=n-1;
				for(int i=n-1;i>=0;i--)
				{
					if(a[i].a<0)
					{
						cu=i;
						break;
					}
					if(cnt==n-1)return;
					if(i<=n-2)
					{
						out.println(1+" "+(a[i+1].b+1)+" "+(a[i].b+1));
						cnt++;
					}
					//cnt++;
				}
				//cu-=1;
				if(cnt==n-1)return;
				out.println(2+" "+(a[(cu)].b+1));
				cnt++;
				for(int i=0;i<cu-1;i++)
				{
					if(cnt==n-1)return;
					out.println(1+" "+(a[i].b+1)+" "+(a[i+1].b+1));
					cnt++;
				}
				if(cu>=1)
				{
					if(cnt==n-1)return;
					out.println(1+" "+(a[cu-1].b+1)+" "+(a[(cu+1)].b+1));
					cnt++;
				}
			}
			else
			{
				for(int i=n-2;i>=0;i--)
				{
					if(cnt==n-1)return;
					out.println(1+" "+(a[i+1].b+1)+" "+(a[i].b+1));
					cnt++;
				}
			}
			return;
		}
		int last=-1,st=-1;
		for(int i=n-1;i>0;i--)
		{
			if(a[i].a==0)
			{
				if(st==-1)st=i;
				last=i;
			}
			if(a[i].a==0 && a[i-1].a==0)
			{
				if(st==-1)st=i;
				if(cnt==n-1)return;
				out.println(1+" "+(a[i].b+1)+" "+(a[i-1].b+1));
				cnt++;
				last=i-1;
			}
		}
		
		if(last!=-1 && last-1>=0 && neg%2!=0)
		{
			if(cnt==n-1)return;
			out.println(1+" "+(a[last].b+1)+" "+(a[last-1].b+1));
			cnt++;
			last--;
		}
		if(last!=-1)
		{
			if(cnt==n-1)return;
			out.println(2+" "+(a[last].b+1));
			cnt++;
		}
		for(int i=0;i<last-1;i++)
		{
			if(cnt==n-1)return;
			out.println(1+" "+(a[i].b+1)+" "+(a[i+1].b+1));
			cnt++;
		}
		for(int i=n-1;i>st+1;i--)
		{
			if(cnt==n-1)return;
			out.println(1+" "+(a[i].b+1)+" "+(a[i-1].b+1));
			cnt++;
		}
		if(last-1>=0)
		{
			if(cnt==n-1)return;
			out.println(1+" "+(a[st+1].b+1)+" "+(a[last-1].b+1));
			cnt++;
		}
	}
	static class Temp
	{
		int c;
		String s;
		public Temp(int c,String s)
		{
			this.c=c;
			char[] a;
			Arrays.sort((a=s.toCharArray()));
			this.s=new String(a);
		}
	}
	
	void solveE()
	{
		//tree construction for given max values of indices of two components
		int n=ni();
		int[] a=new int[n-1];
		for(int i=0;i<n-1;i++)
		{
			int u=ni(),v=ni();
			if(v!=n)
			{
				out.println("NO");
				return;
			}
			a[i]=u;
		}
		Arrays.sort(a);
		int l=0;
		int[] vis=new int[n+1];
		int curr=1;
		ArrayList<Pair> ans=new ArrayList<>();
		while(l<n-1)
		{
			int r=l+1;
			while(r<n-1 && a[l]==a[r])r++;
			int next=n;
			while(l<r-1)
			{
				while(vis[curr]==1)curr++;
				ans.add(new Pair(curr,next));
				next=curr;
				vis[curr]=1;
				l++;
			}
			if(vis[a[l]]==1)
			{
				out.println("NO");
				return;
			}
			ans.add(new Pair(next,a[l]));
			vis[a[l]]=1;
			l++;
		}
		out.println("YES");
		for(Pair p:ans)
		{
			out.println(p.a+" "+p.b);
		}
		out.println();
	}
	
	static int[][] packD(int n, int[] from, int[] to) {
		int[][] g = new int[n][];
		int[] p = new int[n];
		for (int f : from)
			p[f]++;
		for (int i = 0; i < n; i++)
			g[i] = new int[p[i]];
		for (int i = 0; i < from.length; i++) {
			g[from[i]][--p[from[i]]] = to[i];
		}
		return g;
	}
	    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static long gcd(long a,long b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    void run() throws Exception
    {
        if(!debug)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new CodeAgon().run();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}