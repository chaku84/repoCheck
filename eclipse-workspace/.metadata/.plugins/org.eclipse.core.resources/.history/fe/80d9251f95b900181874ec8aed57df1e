package sept;

import java.io.*;
import java.util.*;

public class CodeAgon {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean debug=true;
    boolean debug=false;
    
	void solve()
	{
		int q=ni();
		while(q-->0)
		{
			int x=ni(),l=ni(),r=ni();
			out.println(brute(x, l, r));
			out.println(eff(x,l,r));
		}
		/*
		//debug
		int q=100;
		Random r=new Random();
		while(q-->0)
		{
			int x=r.nextInt(1000)+1,
			l=r.nextInt(1000)+1,
			r=r.nextInt(1000)+1;
		}
		*/
	}
	
	static int eff(int x,int l,int r)
	{
		int ans=0;
		ArrayList<Integer> bit=new ArrayList<>();
		int curr=x;
		while(curr!=0)
		{
			bit.add(curr%2);
			curr/=2;
		}
		Collections.reverse(bit);
		int sz=bit.size();
		int L=l,R=r;
		int tin=0;
		while(L>0 && R>0)
		{
			int c1=(int)((Math.log(L)/Math.log(2)))+1;
			int c2=(int)((Math.log(R)/Math.log(2)))+1;
			if(sz<c1 && sz<c2)
			{
				int v=(int)Math.pow(2, c2-1);
				ans+=v;
				int tmp=L;
				L=0;R=(R>>1);
				if(c1==c2)L=(tmp>>1);
			}
			else
			{
				if(bit.get(tin)==0)
				{
					int v=(int)Math.pow(2, c2-1);
					ans+=v;
					int tmp=L;
					L=0;R=(R>>1);
					if(c1==c2)L=(tmp>>1);
				}
				else
				{
					int v=(int)Math.pow(2, c2-1);
					ans+=v;
					int tmp=L;
					L=0;R=Math.min((R>>1),v-1);
					if(c1==c2)L=(tmp>>1);
				}
				tin++;
			}
		}
		
		
		return ans;
	}
	
	static int brute(int x,int l,int r)
	{
		int max=0;
		for(int i=l;i<=r;i++)
		{
			max=Math.max(max, x^i);
		}
		return max;
	}
	
	static int[][] packD(int n, int[] from, int[] to) {
		int[][] g = new int[n][];
		int[] p = new int[n];
		for (int f : from)
			p[f]++;
		for (int i = 0; i < n; i++)
			g[i] = new int[p[i]];
		for (int i = 0; i < from.length; i++) {
			g[from[i]][--p[from[i]]] = to[i];
		}
		return g;
	}
	    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static int gcd(int a,int b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    void run() throws Exception
    {
        if(!debug)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new CodeAgon().run();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}