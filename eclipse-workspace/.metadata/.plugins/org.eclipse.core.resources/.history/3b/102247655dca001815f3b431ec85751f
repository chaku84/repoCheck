package sept;

import java.io.*;
import java.util.*;

public class TimePass implements Runnable {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean codechef=false;
    boolean codechef=true;
    
	void solve()
	{
		int n=ni();
		int[] a=na(n);
		ans=new int[n][2];
		for(int i=0;i<n;i++)
		{
			ans[i][0]=ans[i][1]=-1;
		}
		comp(a,0,0);
		for(int i=0;i<n;i++)
		{
			//comp(a,i,0);
			//System.out.println(ans[i][0]);
		}
		//comp(a,0,1);
		for(int i=0;i<n;i++)
		{
			System.out.println(ans[i][0]);
		}
	}
	
	static int[][] ans;
	
	static boolean comp(int[] a,int i,int p)
	{
		System.out.println(a[i]+" "+p);
		if(ans[i][p]==1)return true;
		if(ans[i][p]==0)return false;
		int n=a.length;
		
		int curr=a[i];
		for(int j=i-curr;j>=0;j-=curr)
		{
			if(a[j]>a[i] && !comp(a, j, p^1))
			{
				ans[i][p]=1;
				return true;
			}
		}
		for(int j=i+p;j<n;j+=curr)
		{
			if(a[j]>a[i] && !comp(a, j, p^1))
			{
				ans[i][p]=1;
				return true;
			}
		}
		ans[i][p]=0;
		return false;
	}
	
	static ArrayList<int[]> list;
	
	static void permute(int[] arr, int l, int r)
    {
       int i;
       if (l == r)
       {
    	   HashSet<Integer> set=new HashSet<>();
    	   for(int j=1;j<=arr.length;j++)
    	   {
    		   set.add(j);
    	   }
    	   int[] tmp=new int[arr.length];
    	   for(int j=0;j<arr.length;j++)
    	   {
    		   int g=0;
    		   for(int k:set)
    		   {
    			   g=(int) gcd(g,k);
    		   }
    		   tmp[j]=g;
    		   set.remove(arr[j]);
    	   }
    	   list.add(Arrays.copyOf(tmp,arr.length));
       }
       else
       {
           for (i = l; i <= r; i++)
           {
              swap(arr,l,i);
              permute(arr, l+1, r);
              swap(arr,l,i);
           }
       }
    }
	
	static void swap(int[] arr,int i1,int i2)
	 {
		 int tmp=arr[i1];
	   	arr[i1]=arr[i2];
	   	arr[i2]=tmp;
	 }

	static int MAX=1500;
	
	static int prime[], countdiv[]; 
	  
	// Simple sieve to find smallest prime factors of numbers 
	// smaller than MAX 
	void SieveOfEratosthenes() 
	{ 
	    for (int i = 2; i * i < MAX; ++i) 
	    { 
	        if (prime[i]==0) 
	            for (int j = i * i; j < MAX; j += i) 
	                prime[j] = i; 
	    } 
	  
	    // Prime number will have same divisor 
	    for (int i = 1; i < MAX; ++i) 
	        if (prime[i]==0) 
	            prime[i] = i; 
	} 
	  
	// Returns length of the largest subsequence 
	// with GCD more than 1. 
	int largestGCDSubsequence(int arr[], int n) 
	{ 
	    int ans = 0; 
	    for (int i=0; i < n; ++i) 
	    { 
	        int element = arr[i]; 
	  
	        // Fetch total unique prime divisor of element 
	        while (element > 1) 
	        { 
	            int div = prime[element]; 
	  
	            // Increment count[] of Every unique divisor 
	            // we get till now 
	            ++countdiv[div]; 
	  
	            // Find maximum frequency of divisor 
	            ans = Math.max(ans, countdiv[div]); 
	  
	            while (element % div==0) 
	                element /= div; 
	        } 
	    } 
	  
	    return ans; 
	} 
	  
	
	static boolean check(int x)
	{
		char[] a=(""+x).toCharArray();
		int s=0;
		for(int i=0;i<a.length;i++)
		{
			s+=a[i]-'0';
			s%=3;
		}
		if(s==0)return true;
		return false;
	}

	static int[][] packD(int n,int[] from,int[] to)
	{
		int[][] g=new int[n][];
		int[] p=new int[n];
		for(int f:from)
		{
			p[f]++;
		}
		int m=from.length;
		for(int i=0;i<n;i++)
		{
			g[i]=new int[p[i]];
		}
		for(int i=0;i<m;i++)
		{
			g[from[i]][--p[from[i]]]=to[i];
		}
		return g;
	}
	    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static long gcd(long a,long b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    public void run()
    {
        if(codechef)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new Thread(null,new TimePass(),"Main",1<<26).start();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}