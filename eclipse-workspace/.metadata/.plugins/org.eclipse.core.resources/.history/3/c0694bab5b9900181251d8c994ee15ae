package july23to31;

import java.io.*;
import java.util.*;

public class Round501 {
    InputStream is;
    PrintWriter out;
    String INPUT = "";
    //boolean codechef=true;
    boolean codechef=true;
    
    void solve()
    {
    	int t=ni();
    	Random r=new Random();
		while(t-->0)
		{
		    int n=20;
		    int[] a=new int[n];
		    int sum=10;
		    for(int i=0;i<n;i++)
		    {
		        a[i]=r.nextInt(10)+1;
		        //sum+=a[i];
		    }
		    boolean[][] check=new boolean[sum+1][n];
		    Arrays.fill(check[0],true);
		    if(a[0]<=sum/2)check[a[0]][0]=true;
		    for(int j=1;j<=sum;j++)
		    {
		        for(int i=1;i<n;i++)
		        {
		            if(a[i]<=j)check[j][i]=check[j][i-1] || check[j-a[i]][i-1];
		            else check[j][i]=check[j][i-1];
		        }
		    }
		    for(int i=0;i<=sum;i++)
		    {
		    	for(int j=0;j<n;j++)
		    	{
		    		System.out.print(check[i][j]+" ");
		    	}
		    	System.out.println();
		    }
		    ArrayList<Pair> list=new ArrayList<>();
		    
		    int ind=n-1,wt=sum;
		    int b=0;
		    while(ind>0)
		    {
		    	int ind2=ind,wt2=wt;
		    	while(ind2>0 && check[wt2][ind2])
		    	{
		    		if(wt2>=a[ind2] && check[wt2-a[ind2]][ind2-1])
		    		{
		    			Pair pr=new Pair(a[ind2],b);
		    			list.add(pr);
		    			wt2-=a[ind2];
		    		}
		    		ind2--;
		    	}
		    	b++;
		    	ind--;
		    }
		    list.sort(new Comparator<Pair>() {
				@Override
				public int compare(Pair p1, Pair p2) {
					// TODO Auto-generated method stub
					return p1.b-p2.b;
				}});
		    int sz=list.size(),prev=0;
		    for(int i=0;i<sz;i++)
		    {
		    	int val=list.get(i).a;
		    	int index=list.get(i).b;
		    	if(prev!=index)
		    	{
		    		System.out.println();
		    	}
		    	System.out.print(val+" ");
		    	prev=index;
		    }
		    
		}
    }
    
    private int bruteF(int[] a, int n) {
		// TODO Auto-generated method stub
    	int max=1;
    	for(int i=0;i<n;i++)
    	{
    		for(int j=i;j<n;j++)
    		{
    			if(a[i]>=a[j])
    			{
    				max=Math.max(max, j-i+1);
    			}
    		}
    	}
		return max;
	}

	public static long[] radixSort(long[] f){ return radixSort(f, f.length); }
	public static long[] radixSort(long[] f, int n)
	{
		long[] to = new long[n];
		{
			int[] b = new int[65537];
			for(int i = 0;i < n;i++)b[1+(int)(f[i]&0xffff)]++;
			for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
			for(int i = 0;i < n;i++)to[b[(int)(f[i]&0xffff)]++] = f[i];
			long[] d = f; f = to;to = d;
		}
		{
			int[] b = new int[65537];
			for(int i = 0;i < n;i++)b[1+(int)(f[i]>>>16&0xffff)]++;
			for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
			for(int i = 0;i < n;i++)to[b[(int)(f[i]>>>16&0xffff)]++] = f[i];
			long[] d = f; f = to;to = d;
		}
		{
			int[] b = new int[65537];
			for(int i = 0;i < n;i++)b[1+(int)(f[i]>>>32&0xffff)]++;
			for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
			for(int i = 0;i < n;i++)to[b[(int)(f[i]>>>32&0xffff)]++] = f[i];
			long[] d = f; f = to;to = d;
		}
		{
			int[] b = new int[65537];
			for(int i = 0;i < n;i++)b[1+(int)(f[i]>>>48&0xffff)]++;
			for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
			for(int i = 0;i < n;i++)to[b[(int)(f[i]>>>48&0xffff)]++] = f[i];
			long[] d = f; f = to;to = d;
		}
		return f;
	}
	
	static class DSets
	{
		int[] p;
		int[] r;
		int[] s;
		int size;
		int max_component;
		public DSets(int n)
		{
			s=new int[n+1];
			r=new int[n+1];
			p=new int[n+1];
			for(int i=1;i<=n;i++)
			{
				r[i]=0;
				p[i]=i;
				s[i]=1;
			}
			this.size=n+1;
		}
		public int find(int x)
		{
			if(x != p[x]){
	            p[x] = find(p[x]) ;
	        }
	        return p[x] ;
		}
		public boolean unionBySize(int x,int y)
		{
			int rx , ry ;
	        rx = find(x) ;
	        ry = find(y) ;
	        if(rx != ry)
	        {
	            if(r[rx] < r[ry])
	            {
	                p[rx] = ry ;
	                s[ry] += s[rx] ;
	                max_component = Math.max(max_component,s[ry]) ;
	            }
	            else
	            {
	                p[ry] = rx ;
	                s[rx] += s[ry] ;
	                max_component = Math.max(max_component,s[rx]) ;
	            }
	            if(r[rx] == r[ry])
	            {
	                r[rx] ++;
	            }
	            return true ;
	        }
	        return false ;
		}
	}
    
    static class Pair
    {
        int a,b;
        public Pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    
    static int bit[];
    
    static void add(int x,int d,int n)
    {
        for(int i=x;i<=n;i+=i&-i)bit[i]+=d;
    }

    static int query(int x)
    {
        int ret=0;
        for(int i=x;i>0;i-=i&-i)
        ret+=bit[i];
        return ret;
    }
    
    static long lcm(int a,int b)
    {
        long val=a;
        val*=b;
        return (val/gcd(a,b));
    }
    
    static int gcd(int a,int b)
    {
        if(a==0)return b;
        return gcd(b%a,a);
    }
    
    static int pow(int a, int b, int p)
    {
        long ans = 1, base = a;
        while (b!=0)
        {
            if ((b & 1)!=0)
            {
                ans *= base;
                ans%= p;
            }
            base *= base;
            base%= p;
            b >>= 1;
        }
        return (int)ans;
    }

    static int inv(int x, int p)
    {
        return pow(x, p - 2, p);
    }

    
    void run() throws Exception
    {
        if(codechef)oj=true;
        is = oj ? System.in : new ByteArrayInputStream(INPUT.getBytes());
        out = new PrintWriter(System.out);
        
        long s = System.currentTimeMillis();
        solve();
        out.flush();
        tr(System.currentTimeMillis()-s+"ms");
    }
    
    public static void main(String[] args) throws Exception {new Round501().run();}
    
    private byte[] inbuf = new byte[1024];
    public int lenbuf = 0, ptrbuf = 0;
    
    private int readByte()
    {
        if(lenbuf == -1)throw new InputMismatchException();
        if(ptrbuf >= lenbuf){
            ptrbuf = 0;
            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
            if(lenbuf <= 0)return -1;
        }
        return inbuf[ptrbuf++];
    }
    
    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    
    private double nd() { return Double.parseDouble(ns()); }
    private char nc() { return (char)skip(); }
    
    private String ns()
    {
        int b = skip();
        StringBuilder sb = new StringBuilder();
        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    
    private char[] ns(int n)
    {
        char[] buf = new char[n];
        int b = skip(), p = 0;
        while(p < n && !(isSpaceChar(b))){
            buf[p++] = (char)b;
            b = readByte();
        }
        return n == p ? buf : Arrays.copyOf(buf, p);
    }
    
    private char[][] nm(int n, int m)
    {
        char[][] map = new char[n][];
        for(int i = 0;i < n;i++)map[i] = ns(m);
        return map;
    }
    
    private int[] na(int n)
    {
        int[] a = new int[n];
        for(int i = 0;i < n;i++)a[i] = ni();
        return a;
    }
    
    private int ni()
    {
        int num = 0, b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private long nl()
    {
        long num = 0;
        int b;
        boolean minus = false;
        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
        if(b == '-'){
            minus = true;
            b = readByte();
        }
        
        while(true){
            if(b >= '0' && b <= '9'){
                num = num * 10 + (b - '0');
            }else{
                return minus ? -num : num;
            }
            b = readByte();
        }
    }
    
    private boolean oj = System.getProperty("ONLINE_JUDGE") != null;
    private void tr(Object... o) { if(!oj)System.out.println(Arrays.deepToString(o)); }
}
